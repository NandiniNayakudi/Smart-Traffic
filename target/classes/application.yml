server:
  port: 8081
  servlet:
    context-path: /

spring:
  application:
    name: traffic-management-system
  
  datasource:
    url: jdbc:h2:mem:trafficdb
    driver-class-name: org.h2.Driver
    username: sa
    password: password
  
  h2:
    console:
      enabled: true
      path: /h2-console
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
  
  jackson:
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false

  # Web Configuration
  web:
    resources:
      static-locations: classpath:/static/
  mvc:
    static-path-pattern: /static/**

# JWT Configuration
jwt:
  secret: mySecretKey123456789012345678901234567890
  expiration: 86400000 # 24 hours in milliseconds

# Google Cloud Configuration
google:
  cloud:
    project-id: ${GOOGLE_CLOUD_PROJECT_ID:said-eb2f5}
    project-number: ${GOOGLE_CLOUD_PROJECT_NUMBER:1026546995867}
    credentials:
      location: ${GOOGLE_APPLICATION_CREDENTIALS:./google-cloud-key.json}
    ai:
      endpoint: ${GOOGLE_AI_ENDPOINT:https://ml.googleapis.com/v1}
      model-name: ${GOOGLE_AI_MODEL:traffic-prediction-model}
    bigquery:
      enabled: ${GOOGLE_CLOUD_BIGQUERY_ENABLED:true}
      dataset: ${BIGQUERY_DATASET:traffic_analytics}
      location: ${BIGQUERY_LOCATION:US}
    pubsub:
      enabled: ${GOOGLE_CLOUD_PUBSUB_ENABLED:true}
      topic: ${PUBSUB_TOPIC:traffic-updates}
      subscription: ${PUBSUB_SUBSCRIPTION:traffic-updates-subscription}
    storage:
      enabled: ${GOOGLE_CLOUD_STORAGE_ENABLED:true}
      bucket: ${CLOUD_STORAGE_BUCKET:smart-traffic-data-said-eb2f5}
  maps:
    api-key: ${GOOGLE_MAPS_API_KEY:your-api-key-here}

# ML Model Configuration
ml:
  model:
    endpoint: ${ML_MODEL_ENDPOINT:http://localhost:5000/predict}
    timeout: 5000

# Traffic Data Configuration
traffic:
  data:
    retention-days: 30
    batch-size: 100
  ai:
    prediction-horizon-hours: 6
    confidence-threshold: 0.8
    model-update-interval: 3600 # seconds
  eco-routes:
    co2-threshold: 2.0 # kg
    eco-score-threshold: 70.0
    sdg11-threshold: 70.0

# Logging Configuration
logging:
  level:
    com.traffic: DEBUG
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

# Swagger/OpenAPI Configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    config-url: /api/v1/api-docs/swagger-config
    url: /api/v1/api-docs
